{"version":3,"sources":["components/Navbar.js","components/EditPlace.js","pages/auth/auth.js","components/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["ToolNavbar","props","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","NavDropdown","title","Item","Divider","Link","eventKey","Component","signup","username","password","axios","post","then","response","data","catch","err","Signup","state","message","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","setUser","history","push","Form","onSubmit","this","Group","Label","htmlFor","Control","type","onChange","Alert","Button","App","user","placeholder","exact","path","render","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.70678ee0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\n\n\nfunction ToolNavbar (props) {\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"/\">MyTent</Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n    <Navbar.Collapse id=\"responsive-navbar-nav\">\n      <Nav className=\"mr-auto\">\n        {/* <Nav.Link href=\"#features\">Features</Nav.Link>\n        <Nav.Link href=\"#pricing\">Pricing</Nav.Link> */}\n        <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n          <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n          <NavDropdown.Item href=\"#action/3.2\">\n            Another action\n          </NavDropdown.Item>\n          <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item href=\"#action/3.4\">\n            Separated link\n          </NavDropdown.Item>\n        </NavDropdown>\n      </Nav>\n      <Nav>\n        <Nav.Link href=\"#deets\">Profil</Nav.Link>\n        <Nav.Link href=\"/signup\">Sign Up</Nav.Link>\n        <Nav.Link eventKey={2} href=\"#memes\"> LogIn </Nav.Link>\n      </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n\n   \n  );\n}\n\nexport default ToolNavbar;\n","import React, { Component } from 'react';\nimport ImageUploader from 'react-images-upload';\n\nclass EditPlace extends Component {\n  state = {\n    Title: '',\n    Description: '',\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = { pictures: [] };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  onDrop(picture) {\n    this.setState({\n      pictures: this.state.pictures.concat(picture),\n    });\n  }\n  addPlace = () => {\n    const newPlace = { 'title': 'Camping in Berlin', 'description': 'The best camping in Berlin' };\n    this.setState((state, props) => {\n      places: state.places.concat(newPlace)\n    })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { title, description } = this.state;\n    const newPlace = {\n      title,\n      description\n    }\n    console.log(newPlace)\n    this.setState((state, props) => ({\n      places: [newPlace, ...state.places],\n      title: '',\n      description: '',\n    }))\n  }\n  render() {\n    return (\n      <div className='Form'>\n        <h2> Add a new place for Camping!</h2>\n        <form onSubmit={this.handleSubmit}>\n\n          <label htmlFor='title'> Title: </label>\n          <input\n            type='text'\n            name='title'\n            id='title'\n            value={this.state.title}\n          />\n          \n\n          <label htmlFor='description'> Description: </label>\n          <input\n            type='text'\n            name='description'\n            id='description'\n            value={this.state.description}\n          />\n          \n          <br></br>\n          <br></br>\n\n          <button type='submit'> Add a place </button>\n        </form>\n\n        <ImageUploader\n          withIcon={true}\n          buttonText='Choose images'\n          onChange={this.onDrop}\n          imgExtension={['.jpg', '.gif', '.png', '.gif']}\n          maxFileSize={5242880}\n        />\n\n\n        <h1> All my created places </h1>\n        List with all the places I created.\n      </div>\n    )\n  }\n}\n\nexport default EditPlace;\n","import axios from \"axios\";\n\nconst signup = (username, password) => {\n  return axios\n    .post(\"/routes/auth.js\", { username, password })\n    .then((response) => {\n      return response.data;\n    })\n    .catch((err) => {\n      return err.response.data;\n    });\n};\n\nconst login = (username, password) => {\n  return axios\n    .post(\"/api/auth/login\", { username, password })\n    .then((response) => {\n      return response.data;\n    })\n    .catch((err) => {\n      return err.response.data;\n    });\n};\n\nconst logout = () => {\n  return axios\n    .delete(\"/api/auth/logout\")\n    .then((response) => {\n      return response.data;\n    })\n    .catch((err) => {\n      return err.response.data;\n    });\n};\n\nexport { signup, login, logout };\n","import React, { Component } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { signup } from '../pages/auth/auth.js';\n\nexport default class Signup extends Component {\n  state = {\n    username: '',\n    password: '',\n    message: ''\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { username, password } = this.state;\n\n    signup(username, password).then(data => {\n      if (data.message) {\n        this.setState({\n          message: data.message,\n          username: '',\n          password: ''\n        });\n      } else {\n        this.props.setUser(data);\n        this.props.history.push('/projects');\n      }\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <h2>Signup</h2>\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Group>\n            <Form.Label htmlFor='username'>Username: </Form.Label>\n            <Form.Control\n              type='text'\n              name='username'\n              value={this.state.username}\n              onChange={this.handleChange}\n              id='username'\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor='password'>Password: </Form.Label>\n            <Form.Control\n              type='password'\n              name='password'\n              value={this.state.password}\n              onChange={this.handleChange}\n              id='password'\n            />\n          </Form.Group>\n          {this.state.message && (\n            <Alert variant='danger'>{this.state.message}</Alert>\n          )}\n          <Button type='submit'>Signup</Button>\n        </Form>\n      </>\n    );\n  }\n}\n","import ToolNavbar from \"./components/Navbar\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n// import { Route, Redirect } from 'react-router-dom';\nimport Profile from './pages/Profile'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport EditPlace from './components/EditPlace'\n\nimport Signup from './components/SignUp';\n// import Projects from './components/Projects';\n//import Navbar from './components/Navbar';\n//import ProjectDetails from './components/ProjectDetails';\n//import TaskDetails from './components/TaskDetails';\n\n\nclass App extends React.Component {\n\n  state = {\n    user: this.props.user\n  }\n\n  setUser = user => {\n    this.setState({\n      user: user\n    })\n  }\n\n  render() {\n    return (\n    <div className=\"homeApp\">\n      <nav>\n\n       <ToolNavbar />\n      </nav>\n      <div className=\"searchBar\">\n    <div>\n       <input className=\"inputProfil\" type=\"text\" placeholder=\"Search...\" />\n      </div>\n      </div>\n      <Route\n      exact\n      path='/signup'\n      render={props => <Signup setUser={this.setUser} {...props} />}\n      />\n    </div>\n\n    \n      \n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport axios from \"axios\";\n\n\n// axios.get(\"/api/auth/loggedin\").then((response) => {\n//   const user = response.data;\n\n\n  ReactDOM.render(\n    <BrowserRouter>\n      <App  />\n      {/* user={user} */}\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}